#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Программа для создания сырово документа fb2 на основе plain text.
Plain text может содержать ссылки на картинки в формате: <name.jpg>
Модель на генерации xml кода.
(с) Yuriy Astrov
"""
import re
import os
import base64
import xml.dom.minidom as dom
import sys
import time
import base64
import codecs
from optparse import OptionParser

default_cover_image = "cover.jpg"

def del_bad_symbols(line):
    """Удалить некорректные символы из строки."""
    line = line.replace("&","&amp;")
    return line

def make_elem_w_text(newdoc, elem_name, text=""):
    """Создать элемент с текстовым узлом внутри."""
    elem = newdoc.createElement(elem_name)
    txt = newdoc.createTextNode(text)
    elem.appendChild(txt)
    return elem

def make_elem_w_par(newdoc, elem_name, text=""):
    """Создать элемент с текстовым узлом внутри. Текст будет заключен в параграф."""
    elem = newdoc.createElement(elem_name)
    p = newdoc.createElement("p")
    txt = newdoc.createTextNode(text)
    p.appendChild(txt)
    elem.appendChild(p)
    return elem

def make_elem_w_attr_text(newdoc, elem_name, attr_name, attr_value="", text=""):
    """Создать текстовый элемент с атрибутом"""
    elem = newdoc.createElement(elem_name)
    elem.setAttribute(attr_name, attr_value)
    txt = newdoc.createTextNode(text)
    elem.appendChild(txt)
    return elem

def create_author(newdoc, first = "", last = "", middle = "", nick = "", email = ""):
    author_el = newdoc.createElement("author")
    author_first_name_el = make_elem_w_text(newdoc, "first-name", first)
    author_second_name_el = make_elem_w_text(newdoc, "last-name", last)
    author_middle_name_el = make_elem_w_text(newdoc, "middle-name", middle)
    author_nickname_el = make_elem_w_text(newdoc, "nickname", nick)
    author_email_el = make_elem_w_text(newdoc, "email", email)
    author_el.appendChild(author_first_name_el)
    author_el.appendChild(author_second_name_el)
    author_el.appendChild(author_middle_name_el)
    author_el.appendChild(author_nickname_el)
    author_el.appendChild(author_email_el)
    return author_el

def isStartSection(line):
    """Проверка на начало главы"""
    line = line
    words = [u"Глава ",u"Эпилог ",u"Часть ", u"Предисловие ",u"Послесловие ",
            u"Chapter",u"Part", u"Том "]
    for w in words:
        if line.startswith(w):
            return True
    return False

def gen_from_file(fname, foutname, from_encoding, to_encoding, need_images = True):
    file_path = os.path.dirname(fname)
    images= []
    section = None
    impl = dom.getDOMImplementation()
    newdoc = impl.createDocument(None, "FictionBook", None)
    top_element = newdoc.documentElement
    top_element.setAttribute("xmlns", "http://www.gribuser.ru/xml/fictionbook/2.0")
    top_element.setAttribute("xmlns:xlink", \
                            "http://www.w3.org/1999/xlink")
    
    description_element = newdoc.createElement("description")
    title_info_el = newdoc.createElement("title-info")
    
    genre_el = make_elem_w_text(newdoc, "genre", "sf_fiction")
    author_el = create_author(newdoc,"Ivan","Ivanov", "Ivanchenko")

    book_title_el = newdoc.createElement("book-title")
    book_title_el.appendChild( newdoc.createTextNode("Book Title") )

    annotation_el = make_elem_w_par(newdoc, "annotation", "Hello")
    lang_el = make_elem_w_text(newdoc ,"lang", "ru")

    title_info_el.appendChild(genre_el)
    title_info_el.appendChild(author_el)
    title_info_el.appendChild(book_title_el)
    title_info_el.appendChild(annotation_el)

    if os.path.exists( os.path.join( file_path, \
                                    default_cover_image)):
        image_el = newdoc.createElement("image")
        image_el.setAttribute("xlink:href","#"+default_cover_image)
        cover_el = newdoc.createElement("coverage")
        cover_el.appendChild(image_el)
        images.append(default_cover_image)
        title_info_el.appendChild(cover_el)

    title_info_el.appendChild(lang_el)

    document_info_el = newdoc.createElement("document-info")
    author_el = create_author(newdoc,"Ivan","Ivanov", "Ivanchenko")
    date_el = make_elem_w_attr_text(newdoc, "date", "value", \
                                    time.strftime("%Y-%m-%d"), \
                                    time.strftime("%Y"))
    id_el = make_elem_w_text(newdoc, "id", \
                            "YA-"+time.strftime("%Y%m%d%H%M%S"))
    version_el = make_elem_w_text(newdoc, "version", "1.0")
    document_info_el.appendChild(author_el)
    document_info_el.appendChild(date_el)
    document_info_el.appendChild(id_el)
    document_info_el.appendChild(version_el)

    description_element.appendChild(title_info_el)
    description_element.appendChild(document_info_el)
    top_element.appendChild(description_element)

    body_element = newdoc.createElement("body")
    k = 0
    p = ""
    with codecs.open(fname, "r", encoding= from_encoding) as fin:
        for line in fin:
            line = del_bad_symbols(line)
            line_l = line.lstrip().rstrip()
            if isStartSection(line_l) or k == 0:
                if p != "":
                    el = make_elem_w_text(newdoc, "p", p)
                    p = ""
                    section.appendChild(el)
                k += 1
                if section:
                    body_element.appendChild(section)
                section = newdoc.createElement("section")
                title = newdoc.createElement("title")
                par = newdoc.createElement("p")
                text = newdoc.createTextNode(line_l )
                par.appendChild(text)
                title.appendChild(par)
                section.appendChild(title)
                continue
            #Empty line
            if line_l == "":
                if p != "":
                    el = make_elem_w_text(newdoc, "p", p)
                    p = ""
                    section.appendChild(el)
                par = newdoc.createElement("empty-line")
                section.appendChild(par)
                continue
            #Pictures
            if ".jpg" in line_l or ".png" in line_l or ".jpeg" in line_l:
                if p != "":
                    el = make_elem_w_text(newdoc, "p", p)
                    section.appendChild(el)
                    p = ""
                if not need_images:
                    continue
                picts = re.findall(r"<.+?>", line_l, re.I)
                for pict in picts:
                    pict = pict.replace("<","")
                    pict = pict.replace(">","")
                    if not os.path.exists( os.path.join( file_path ,pict)):
                        continue
                    el = newdoc.createElement("p")
                    image_el = newdoc.createElement("image")
                    image_el.setAttribute("xlink:href","#"+pict)
                    el.appendChild(image_el)
                    section.appendChild(el)
                    images.append(pict)
                continue
            #Text
            if line.startswith("   ") or line_l.startswith("-") or line_l.startswith('"'):
                if p != "":
                    el = make_elem_w_text(newdoc, "p", p)
                    section.appendChild(el)
                    p = ""
            p += line_l
            continue
        if p != "":
            el = make_elem_w_text(newdoc, "p", p)
            section.appendChild(el)
            p = ""
               
        body_element.appendChild(section)
        top_element.appendChild(body_element)
        
        if need_images:
            for im in images:
                im_file_name = os.path.join(file_path, im)
                if not os.path.exists(im_file_name):
                    continue
                with open(im_file_name, "rb") as f_im:
                    data = f_im.read()
                data = base64.b64encode(data)
                tp = im.split(".")[1]
                if tp in ["jpg", "jpeg"]:
                    tp = "jpeg"
                if tp == ".png":
                    tp="png"
                binary_el = newdoc.createElement("binary")
                binary_el.setAttribute("id", im)
                binary_el.setAttribute("content-type","image/"+tp)
                im_el = newdoc.createTextNode(data.decode(to_encoding)) #or may use str(data, 'utf-8')
                binary_el.appendChild(im_el)
                top_element.appendChild(binary_el)

        if sys.version_info.major < 3:
            our_xml = newdoc.toxml().encode(to_encoding, "ignore")
            del newdoc
            newdoc = dom.parseString(our_xml)
            our_xml = newdoc.toprettyxml(indent=" ", encoding= to_encoding)
            with codecs.open(foutname,"wb") as f:
                f.write(our_xml)
        elif sys.version_info.major == 3:
            with codecs.open(foutname, "w", encoding= to_encoding) as f:
                newdoc.writexml(f, indent="\n", addindent=" ",encoding= to_encoding)

def main():
    usage = "usage: %prog options input_file.txt output_file.fb2"
    parser = OptionParser(usage=usage)
    parser.add_option("-e", "--encoding", dest="encoding",
                  help="Encoding for input and output file", 
                  metavar="ENCODING", default="UTF-8")
    parser.add_option("-f", "--from-encoding", dest="from_encoding",
                  help="Encoding for input file (need -t)", metavar="ENCODING")
    parser.add_option("-t", "--to-encoding", dest="to_encoding",
                  help="Encoding for output file (need -f)", metavar="ENCODING")
    (options, args) = parser.parse_args()
    if len(args) < 2:
        sys.stderr.write('Need arguments input_file.txt or output_file.fb2\n')
        sys.exit(1)
    fname = args[0]
    foutname = args[1]

    if options.from_encoding and options.to_encoding:
        iencoding = options.from_encoding
        oencoding = options.to_encoding
    elif options.encoding:
        iencoding = options.encoding
        oencoding = options.encoding

    fname = os.path.abspath(fname)
    foutname = os.path.abspath(foutname)
    try:
        gen_from_file(fname, foutname, iencoding, oencoding)
    except Exception as e:
        sys.stderr.write('%s\n' %e)

if __name__ == "__main__":
    main()
